<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="postMapping">
	<resultMap type="me.sevenstack.web.model.Post" id="post-result">
		<id     property="postId"          column="post_id"/>
		<result property="title"       column="title"/>
		<result property="content"     column="content"/>
		<result property="authorId"    column="author_id"/>
		<result property="visitsNum"   column="visits_num"/>
		<result property="favNum"      column="fav_num"/>
		<result property="createTime"  column="create_time"/>
		<result property="updateTime"  column="update_time"/>
		<association property="author" column="author_id" javaType="user" resultMap="userMapping.only-user"/>
	</resultMap>
	<!-- 停用 -->
	<resultMap type="me.sevenstack.web.model.Post" extends="post-result" id="one-post-result">
	    <collection property="commentList" column="post_id"  javaType="ArrayList" ofType="comment" select="findCommentListByPost" />
	</resultMap>
	
	<resultMap type="comment" id="comment-result">
	    <id     property="commentId"          column="comment_id"/>
	    <id     property="content"          column="content"/>
	    <result property="createTime"  column="create_time"/>
        <result property="updateTime"  column="update_time"/>
	    <association property="user" column="user_id" javaType="user" resultMap="userMapping.only-user"/>
	</resultMap>
	<select id="findPostListCount" resultType="_int" parameterType="post" >
        select count(*)
          from posts p,users u
         where status = 0 and p.author_id = u.user_id
         <if test="postId != null">
           and p.post_id = #{postId}
         </if>
         <if test="authorId != null">
           and p.author_id = #{author_id}
         </if>
    </select>
    <select id="findPostList" resultMap="post-result" parameterType="post" >
        select p.post_id post_id,
               p.title title,
               p.content content,
               p.author_id author_id,
               p.visits_num visits_num,
               (SELECT COUNT(post_id) FROM user_post_favorite WHERE post_id = p.post_id) fav_num,
               p.create_time create_time,
               p.update_time update_time,
               u.*
          from posts p,users u
         where status = 0 and p.author_id = u.user_id
         <if test="postId != null">
           and p.post_id = #{postId}
         </if>
         <if test="authorId != null">
           and p.author_id = #{author_id}
         </if>
         
      order by p.create_time desc
      <if test="pagination != null">
         	limit #{pagination.offset},#{pagination.limit}
         </if>
      <!-- TODO 条件 -->
    </select>
    
    <select id="findPostListByAuthor" parameterType="_int" resultType="post">
        select *
          from posts
         where status = 0
           and author_id = #{value}
    </select>
    
    <select id="findPostById" resultMap="post-result" parameterType="_int">
        select *
          from posts p left join users u 
            on p.author_id = u.user_id
         where p.status = 0
           and p.post_id = #{postId}
    </select>
    
    <select id="findCommentCountByPids" parameterType="Map" resultType="Map">
        select post_id postId,
               COUNT(post_id) commentCount
          from comments
         WHERE post_id 
            IN <foreach collection="postIds" index="index" item="item" open="(" separator="," close=")"> #{item} </foreach> 
         GROUP BY post_id
    </select>
    
    <update id="updatePost" parameterType="post">
        update posts
           set title       = #{title},
               content     = #{content},
               author_id   = #{authorId},
               visits_num  = #{visitsNum},
               update_time = #{updateTime}
         where post_id     = #{postId}
    </update>
    <update id="updatePostStatus" parameterType="post">
        update posts
           set status      = #{status},
               update_time = #{updateTime}
         where post_id          = #{postId}
    </update>
    <insert id="insertPost" parameterType="post">
        insert into posts (
               title,
               content,
               author_id,
               visits_num,
               fav_num,
               status,
               create_time,
               update_time)
        values (#{title},
               #{content},
               #{authorId},
               #{visitsNum},
               #{favNum},
               0,
               #{createTime},
               #{updateTime})
    </insert>
    <delete id="deletePostById" parameterType="_int">
        delete from posts
           set postId = #{value}
    </delete>
    <!-- TODO delete -->
    
    <!-- Comment part -->
    <select id="findCommentListByPostCount" parameterType="comment" resultType="_int">
        select count(*)
          from comments c left join users u 
            on c.user_id = u.user_id
         where post_id = #{postId}
    </select>
    <select id="findCommentListByPost" parameterType="comment" resultMap="comment-result">
        select *
          from comments c left join users u 
            on c.user_id = u.user_id
         where post_id = #{postId}
         limit #{pagination.offset},#{pagination.limit}
    </select>
    <!-- Tag -->
    <select id="findTagListLikeName" parameterType="string" resultType="tag">
        select tag_id tagId,
               tag_name tagName
          from tags
         where lower(tag_name) like lower(#{value})
    </select>
    <insert id="insertComment" parameterType="comment">
        insert into comments(
               content,
               user_id,
               post_id,
               create_time,
               update_time)
        values (#{content},
               #{userId},
               #{postId},
               unix_timestamp()*1000,
               unix_timestamp()*1000)
    </insert>
    
</mapper>